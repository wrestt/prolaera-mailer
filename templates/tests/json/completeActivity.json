{
  "access": [1001],
  "active": true,
  "activity_id": "f3fe0588-8c4e-4f87-b18f-fa90dfa61db7",
  "archive": false,
  "author": "Teagan Wrest",
  "body":
    "<h2 style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 23px; padding-right: 30px; color: rgb(0, 0, 0);\">Expressions and statements</h2><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_EuyWCUdM/0\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_EuyWCUdM/0\" style=\"color: rgb(68, 102, 119);\"></a>In&nbsp;<a href=\"http://eloquentjavascript.net/01_values.html#values\" style=\"color: rgb(68, 102, 119);\">Chapter 1</a>, we made some values and then applied operators to them to get new values. Creating values like this is an essential part of every JavaScript program, but it is only a part.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_8CCep1TQ8b\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_8CCep1TQ8b\" style=\"color: rgb(68, 102, 119);\"></a>A fragment of code that produces a value is called an&nbsp;<em>expression</em>. Every value that is written literally (such as&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">22</code>&nbsp;or&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">\"psychoanalysis\"</code>) is an expression. An expression between parentheses is also an expression, as is a binary operator applied to two expressions or a unary operator applied to one.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_QXQG3kVSFh\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_QXQG3kVSFh\" style=\"color: rgb(68, 102, 119);\"></a>This shows part of the beauty of a language-based interface. Expressions can nest in a way very similar to the way subsentences in human languages are nested—a subsentence can contain its own subsentences, and so on. This allows us to combine expressions to express arbitrarily complex computations.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_K6OJ6JuFaH\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_K6OJ6JuFaH\" style=\"color: rgb(68, 102, 119);\"></a>If an expression corresponds to a sentence fragment, a JavaScript&nbsp;<em>statement</em>corresponds to a full sentence in a human language. A program is simply a list of statements.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_NAzxo1M6WC\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_NAzxo1M6WC\" style=\"color: rgb(68, 102, 119);\"></a>The simplest kind of statement is an expression with a semicolon after it. This is a program:</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><div class=\"sandboxhint\" style=\"position: absolute; right: -15px; font-family: tahoma, arial, sans-serif; font-size: 12.6px; padding: 4px 8px; background: rgb(220, 220, 220); color: white; border-radius: 5px;\">edit &amp; run code by clicking it</div><a class=\"c_ident\" id=\"c_ShAmL4Xddd\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_ShAmL4Xddd\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">1</span>;\n<span class=\"cm-operator\">!</span><span class=\"cm-atom\" style=\"color: rgb(17, 0, 102);\">false</span>;</pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_dj4UvUmws0\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_dj4UvUmws0\" style=\"color: rgb(68, 102, 119);\"></a>It is a useless program, though. An expression can be content to just produce a value, which can then be used by the enclosing expression. A statement stands on its own and amounts to something only if it affects the world. It could display something on the screen—that counts as changing the world—or it could change the internal state of the machine in a way that will affect the statements that come after it. These changes are called&nbsp;<em>side effects</em>. The statements in the previous example just produce the values&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">1</code>&nbsp;and&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">true</code>&nbsp;and then immediately throw them away. This leaves no impression on the world at all. When executing the program, nothing observable happens.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_neJqLsvK+g\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_neJqLsvK+g\" style=\"color: rgb(68, 102, 119);\"></a>In some cases, JavaScript allows you to omit the semicolon at the end of a statement. In other cases, it has to be there, or the next line will be treated as part of the same statement. The rules for when it can be safely omitted are somewhat complex and error-prone. In this book, every statement that needs a semicolon will always be terminated by one. I recommend you do the same in your own programs, at least until you’ve learned more about subtleties involved in leaving out semicolons.</p><h2 style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 23px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_rAGNsfewCX\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_rAGNsfewCX\" style=\"color: rgb(68, 102, 119);\"></a>Variables</h2><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_i0lKsEoj6z\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_i0lKsEoj6z\" style=\"color: rgb(68, 102, 119);\"></a>How does a program keep an internal state? How does it remember things? We have seen how to produce new values from old values, but this does not change the old values, and the new value has to be immediately used or it will dissipate again. To catch and hold values, JavaScript provides a thing called a&nbsp;<em>variable</em>.</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_eDAXp+U+Cr\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_eDAXp+U+Cr\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">caught</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">5</span> <span class=\"cm-operator\">*</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">5</span>;</pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_Jhk5gi+tgk\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_Jhk5gi+tgk\" style=\"color: rgb(68, 102, 119);\"></a>And that gives us our second kind of statement. The special word (<em>keyword</em>)&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">var</code>&nbsp;indicates that this sentence is going to define a variable. It is followed by the name of the variable and, if we want to immediately give it a value, by an&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">=</code>operator and an expression.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_EkxlfkTaWl\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_EkxlfkTaWl\" style=\"color: rgb(68, 102, 119);\"></a>The previous statement creates a variable called&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">caught</code>&nbsp;and uses it to grab hold of the number that is produced by multiplying 5 by 5.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_Fh873D6aQC\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_Fh873D6aQC\" style=\"color: rgb(68, 102, 119);\"></a>After a variable has been defined, its name can be used as an expression. The value of such an expression is the value the variable currently holds. Here’s an example:</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_wqLGHbX6ix\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_wqLGHbX6ix\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">ten</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">10</span>;\n<span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-variable\">ten</span> <span class=\"cm-operator\">*</span> <span class=\"cm-variable\">ten</span>);\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// → 100</span></pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_TPVvmRq49D\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_TPVvmRq49D\" style=\"color: rgb(68, 102, 119);\"></a>Variable names can be any word that isn’t a reserved word (such as&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">var</code>). They may not include spaces. Digits can also be part of variable names—<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">catch22</code>&nbsp;is a valid name, for example—but the name must not start with a digit. A variable name cannot include punctuation, except for the characters&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">$</code>&nbsp;and&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">_</code>.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_ew9BThyy9D\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_ew9BThyy9D\" style=\"color: rgb(68, 102, 119);\"></a>When a variable points at a value, that does not mean it is tied to that value forever. The&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">=</code>&nbsp;operator can be used at any time on existing variables to disconnect them from their current value and have them point to a new one.</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_XcO+dNCGCJ\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_XcO+dNCGCJ\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">mood</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"light\"</span>;\n<span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-variable\">mood</span>);\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// → light</span>\n<span class=\"cm-variable\">mood</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"dark\"</span>;\n<span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-variable\">mood</span>);\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// → dark</span></pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_tdX1rrdcPQ\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_tdX1rrdcPQ\" style=\"color: rgb(68, 102, 119);\"></a>You should imagine variables as tentacles, rather than boxes. They do not<em>contain</em>&nbsp;values; they&nbsp;<em>grasp</em>&nbsp;them—two variables can refer to the same value. A program can access only the values that it still has a hold on. When you need to remember something, you grow a tentacle to hold on to it or you reattach one of your existing tentacles to it.</p><div class=\"image\" style=\"max-width: 640px; margin: 0px 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><img src=\"http://eloquentjavascript.net/img/octopus.jpg\" alt=\"Variables as tentacles\" style=\"max-width: 100%;\"></div><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_bJwHD1AmQW\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_bJwHD1AmQW\" style=\"color: rgb(68, 102, 119);\"></a>Let’s look at an example. To remember the number of dollars that Luigi still owes you, you create a variable. And then when he pays back $35, you give this variable a new value.</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_w345cOF4KR\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_w345cOF4KR\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">luigisDebt</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">140</span>;\n<span class=\"cm-variable\">luigisDebt</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">luigisDebt</span> <span class=\"cm-operator\">-</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">35</span>;\n<span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-variable\">luigisDebt</span>);\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// → 105</span></pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_Kti5/Q6NH3\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_Kti5/Q6NH3\" style=\"color: rgb(68, 102, 119);\"></a>When you define a variable without giving it a value, the tentacle has nothing to grasp, so it ends in thin air. If you ask for the value of an empty variable, you’ll get the value&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">undefined</code>.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_/AKSyKwnu0\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_/AKSyKwnu0\" style=\"color: rgb(68, 102, 119);\"></a>A single&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">var</code>&nbsp;statement may define multiple variables. The definitions must be separated by commas.</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_QZs3exna/v\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_QZs3exna/v\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">one</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">1</span>, <span class=\"cm-variable\">two</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">2</span>;\n<span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-variable\">one</span> <span class=\"cm-operator\">+</span> <span class=\"cm-variable\">two</span>);\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// → 3</span></pre><h2 style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 23px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_ko4pqLOTdI\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_ko4pqLOTdI\" style=\"color: rgb(68, 102, 119);\"></a>Keywords and reserved words</h2><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_GioEDRc+dl\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_GioEDRc+dl\" style=\"color: rgb(68, 102, 119);\"></a>Words with a special meaning, such as&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">var</code>, are&nbsp;<em>keywords</em>, and they may not be used as variable names. There are also a number of words that are “reserved for use” in future versions of JavaScript. These are also officially not allowed to be used as variable names, though some JavaScript environments do allow them. The full list of keywords and reserved words is rather long.</p><pre data-language=\"text/plain\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_DsAGZZBb8k\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_DsAGZZBb8k\" style=\"color: rgb(68, 102, 119);\"></a>break case catch class const continue debugger\ndefault delete do else enum export extends false\nfinally for function if implements import in\ninstanceof interface let new null package private\nprotected public return static super switch this\nthrow true try typeof var void while with yield</pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_0pDQHpgrM3\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_0pDQHpgrM3\" style=\"color: rgb(68, 102, 119);\"></a>Don’t worry about memorizing these, but remember that this might be the problem when a variable definition does not work as expected.</p><h2 style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 23px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_2Tc54fkIgF\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_2Tc54fkIgF\" style=\"color: rgb(68, 102, 119);\"></a>The environment</h2><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_tJKFexJV/j\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_tJKFexJV/j\" style=\"color: rgb(68, 102, 119);\"></a>The collection of variables and their values that exist at a given time is called the&nbsp;<em>environment</em>. When a program starts up, this environment is not empty. It always contains variables that are part of the language standard, and most of the time, it has variables that provide ways to interact with the surrounding system. For example, in a browser, there are variables and functions to inspect and influence the currently loaded website and to read mouse and keyboard input.</p><h2 style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 23px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_K5Yd6h3Axg\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_K5Yd6h3Axg\" style=\"color: rgb(68, 102, 119);\"></a>Functions</h2><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_S7KjMy3yAl\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_S7KjMy3yAl\" style=\"color: rgb(68, 102, 119);\"></a>A lot of the values provided in the default environment have the type&nbsp;<em>function</em>. A function is a piece of program wrapped in a value. Such values can be&nbsp;<em>applied</em>in order to run the wrapped program. For example, in a browser environment, the variable&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">alert</code>&nbsp;holds a function that shows a little dialog box with a message. It is used like this:</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_/bha8x/lU5\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_/bha8x/lU5\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-variable\">alert</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"Good morning!\"</span>);</pre><div class=\"image\" style=\"max-width: 640px; margin: 0px 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><img src=\"http://eloquentjavascript.net/img/alert.png\" alt=\"An alert dialog\" style=\"max-width: 100%;\"></div><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_9qu6Ki2/lH\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_9qu6Ki2/lH\" style=\"color: rgb(68, 102, 119);\"></a>Executing a function is called&nbsp;<em>invoking</em>,&nbsp;<em>calling</em>, or&nbsp;<em>applying</em>&nbsp;it. You can call a function by putting parentheses after an expression that produces a function value. Usually you’ll directly use the name of the variable that holds the function. The values between the parentheses are given to the program inside the function. In the example, the&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">alert</code>&nbsp;function uses the string that we give it as the text to show in the dialog box. Values given to functions are called&nbsp;<em>arguments</em>. The&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">alert</code>&nbsp;function needs only one of them, but other functions might need a different number or different types of arguments.</p><h2 style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 23px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_6+Vb3XQoaa\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_6+Vb3XQoaa\" style=\"color: rgb(68, 102, 119);\"></a>The console.log function</h2><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_HDjV1sA8vQ\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_HDjV1sA8vQ\" style=\"color: rgb(68, 102, 119);\"></a>The&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">alert</code>&nbsp;function can be useful as an output device when experimenting, but clicking away all those little windows will get on your nerves. In past examples, we’ve used&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">console.log</code>&nbsp;to output values. Most JavaScript systems (including all modern web browsers and Node.js) provide a&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">console.log</code>&nbsp;function that writes out its arguments to&nbsp;<em>some</em>&nbsp;text output device. In browsers, the output lands in the JavaScript console. This part of the browser interface is hidden by default, but most browsers open it when you press F12 or, on Mac, when you press Command-Option-I. If that does not work, search through the menus for an item named “web console” or “developer tools”.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_bTfrhpuIIt\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_bTfrhpuIIt\" style=\"color: rgb(68, 102, 119);\"></a>When running the examples, or your own code, on the pages of this book,&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">console.log</code>&nbsp;output will be shown after the example, instead of in the browser’s JavaScript console.</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_K84NrOL+1F\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_K84NrOL+1F\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">x</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">30</span>;\n<span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"the value of x is\"</span>, <span class=\"cm-variable\">x</span>);\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// → the value of x is 30</span></pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_lKC7MRhfz2\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_lKC7MRhfz2\" style=\"color: rgb(68, 102, 119);\"></a>Though variable names cannot contain period characters,&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">console.log</code>&nbsp;clearly has one. This is because&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">console.log</code>&nbsp;isn’t a simple variable. It is actually an expression that retrieves the&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">log</code>&nbsp;property from the value held by the&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">console</code>variable. We will find out exactly what this means in&nbsp;<a href=\"http://eloquentjavascript.net/04_data.html#properties\" style=\"color: rgb(68, 102, 119);\">Chapter 4</a>.</p><h2 id=\"return_values\" style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 23px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_nULi9znEdr\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_nULi9znEdr\" style=\"color: rgb(68, 102, 119);\"></a>Return values</h2><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_cJD1JUU5+H\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_cJD1JUU5+H\" style=\"color: rgb(68, 102, 119);\"></a>Showing a dialog box or writing text to the screen is a&nbsp;<em>side effect</em>. A lot of functions are useful because of the side effects they produce. Functions may also produce values, and in that case, they don’t need to have a side effect to be useful. For example, the function&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">Math.max</code>&nbsp;takes any number of number values and gives back the greatest.</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_B7v4h49+r4\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_B7v4h49+r4\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-variable\">Math</span>.<span class=\"cm-property\">max</span>(<span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">2</span>, <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">4</span>));\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// → 4</span></pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_n4ne85oslE\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_n4ne85oslE\" style=\"color: rgb(68, 102, 119);\"></a>When a function produces a value, it is said to&nbsp;<em>return</em>&nbsp;that value. Anything that produces a value is an expression in JavaScript, which means function calls can be used within larger expressions. Here a call to&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">Math.min</code>, which is the opposite of&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">Math.max</code>, is used as an input to the plus operator:</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_XILWvn5oO1\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_XILWvn5oO1\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-variable\">Math</span>.<span class=\"cm-property\">min</span>(<span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">2</span>, <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">4</span>) <span class=\"cm-operator\">+</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">100</span>);\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// → 102</span></pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_bhFVJn8rDc\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_bhFVJn8rDc\" style=\"color: rgb(68, 102, 119);\"></a>The&nbsp;<a href=\"http://eloquentjavascript.net/03_functions.html#functions\" style=\"color: rgb(68, 102, 119);\">next chapter</a>&nbsp;explains how to write your own functions.</p><h2 style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 23px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_1nddjRgQ5+\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_1nddjRgQ5+\" style=\"color: rgb(68, 102, 119);\"></a>prompt and confirm</h2><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_tJIGQUSpum\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_tJIGQUSpum\" style=\"color: rgb(68, 102, 119);\"></a>Browser environments contain other functions besides&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">alert</code>&nbsp;for popping up windows. You can ask the user an OK/Cancel question using&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">confirm</code>. This returns a Boolean:&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">true</code>&nbsp;if the user clicks OK and&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">false</code>&nbsp;if the user clicks Cancel.</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_8+qosPEiZf\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_8+qosPEiZf\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-variable\">confirm</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"Shall we, then?\"</span>);</pre><div class=\"image\" style=\"max-width: 640px; margin: 0px 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><img src=\"http://eloquentjavascript.net/img/confirm.png\" alt=\"A confirm dialog\" style=\"max-width: 100%;\"></div><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_+abQLgqQ+O\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_+abQLgqQ+O\" style=\"color: rgb(68, 102, 119);\"></a>The&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">prompt</code>&nbsp;function can be used to ask an “open” question. The first argument is the question, the second one is the text that the user starts with. A line of text can be typed into the dialog window, and the function will return this text as a string.</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_zvjwz8HPIq\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_zvjwz8HPIq\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-variable\">prompt</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"Tell me everything you know.\"</span>, <span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"...\"</span>);</pre><div class=\"image\" style=\"max-width: 640px; margin: 0px 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><img src=\"http://eloquentjavascript.net/img/prompt.png\" alt=\"An prompt dialog\" style=\"max-width: 100%;\"></div><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_mGjwXljToy\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_mGjwXljToy\" style=\"color: rgb(68, 102, 119);\"></a>These two functions aren’t used much in modern web programming, mostly because you have no control over the way the resulting windows look, but they are useful for toy programs and experiments.</p><h2 style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 23px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_rDxYNPd65Z\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_rDxYNPd65Z\" style=\"color: rgb(68, 102, 119);\"></a>Control flow</h2><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_QdCrOXOgYy\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_QdCrOXOgYy\" style=\"color: rgb(68, 102, 119);\"></a>When your program contains more than one statement, the statements are executed, predictably, from top to bottom. As a basic example, this program has two statements. The first one asks the user for a number, and the second, which is executed afterward, shows the square of that number.</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_vMmSZhI46K\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_vMmSZhI46K\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">theNumber</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">Number</span>(<span class=\"cm-variable\">prompt</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"Pick a number\"</span>, <span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"\"</span>));\n<span class=\"cm-variable\">alert</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"Your number is the square root of \"</span> <span class=\"cm-operator\">+</span>\n      <span class=\"cm-variable\">theNumber</span> <span class=\"cm-operator\">*</span> <span class=\"cm-variable\">theNumber</span>);</pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_aq3OoDkq71\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_aq3OoDkq71\" style=\"color: rgb(68, 102, 119);\"></a>The function&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">Number</code>&nbsp;converts a value to a number. We need that conversion because the result of&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">prompt</code>&nbsp;is a string value, and we want a number. There are similar functions called&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">String</code>&nbsp;and&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">Boolean</code>&nbsp;that convert values to those types.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_M37XqCwh0I\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_M37XqCwh0I\" style=\"color: rgb(68, 102, 119);\"></a>Here is the rather trivial schematic representation of straight control flow:</p><div class=\"image\" style=\"max-width: 640px; margin: 0px 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><img src=\"http://eloquentjavascript.net/img/controlflow-straight.svg\" alt=\"Trivial control flow\" style=\"max-width: 100%;\"></div><h2 style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 23px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_wpz5oi2dy7\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_wpz5oi2dy7\" style=\"color: rgb(68, 102, 119);\"></a>Conditional execution</h2><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_u+xpyPmLV8\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_u+xpyPmLV8\" style=\"color: rgb(68, 102, 119);\"></a>Executing statements in straight-line order isn’t the only option we have. An alternative is&nbsp;<em>conditional execution</em>, where we choose between two different routes based on a Boolean value, like this:</p><div class=\"image\" style=\"max-width: 640px; margin: 0px 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><img src=\"http://eloquentjavascript.net/img/controlflow-if.svg\" alt=\"Conditional control flow\" style=\"max-width: 100%;\"></div><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_+kdDcK9eLo\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_+kdDcK9eLo\" style=\"color: rgb(68, 102, 119);\"></a>Conditional execution is written with the&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">if</code>&nbsp;keyword in JavaScript. In the simple case, we just want some code to be executed if, and only if, a certain condition holds. For example, in the previous program, we might want to show the square of the input only if the input is actually a number.</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_DPOOzOEZf+\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_DPOOzOEZf+\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">theNumber</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">Number</span>(<span class=\"cm-variable\">prompt</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"Pick a number\"</span>, <span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"\"</span>));\n<span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">if</span> (<span class=\"cm-operator\">!</span><span class=\"cm-variable\">isNaN</span>(<span class=\"cm-variable\">theNumber</span>))\n  <span class=\"cm-variable\">alert</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"Your number is the square root of \"</span> <span class=\"cm-operator\">+</span>\n        <span class=\"cm-variable\">theNumber</span> <span class=\"cm-operator\">*</span> <span class=\"cm-variable\">theNumber</span>);</pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_d0Z3YQB6e1\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_d0Z3YQB6e1\" style=\"color: rgb(68, 102, 119);\"></a>With this modification, if you enter “cheese”, no output will be shown.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_QqE0pn6CUK\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_QqE0pn6CUK\" style=\"color: rgb(68, 102, 119);\"></a>The keyword&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">if</code>&nbsp;executes or skips a statement depending on the value of a Boolean expression. The deciding expression is written after the keyword, between parentheses, followed by the statement to execute.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_nJcsWbCJmU\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_nJcsWbCJmU\" style=\"color: rgb(68, 102, 119);\"></a>The&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">isNaN</code>&nbsp;function is a standard JavaScript function that returns&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">true</code>&nbsp;only if the argument it is given is&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">NaN</code>. The&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">Number</code>&nbsp;function happens to return&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">NaN</code>when you give it a string that doesn’t represent a valid number. Thus, the condition translates to “unless&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">theNumber</code>&nbsp;is not-a-number, do this”.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_l1EGERvXxU\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_l1EGERvXxU\" style=\"color: rgb(68, 102, 119);\"></a>You often won’t just have code that executes when a condition holds true, but also code that handles the other case. This alternate path is represented by the second arrow in the diagram. The&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">else</code>&nbsp;keyword can be used, together with&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">if</code>, to create two separate, alternative execution paths.</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_2BC2dE/U8L\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_2BC2dE/U8L\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">theNumber</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">Number</span>(<span class=\"cm-variable\">prompt</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"Pick a number\"</span>, <span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"\"</span>));\n<span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">if</span> (<span class=\"cm-operator\">!</span><span class=\"cm-variable\">isNaN</span>(<span class=\"cm-variable\">theNumber</span>))\n  <span class=\"cm-variable\">alert</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"Your number is the square root of \"</span> <span class=\"cm-operator\">+</span>\n        <span class=\"cm-variable\">theNumber</span> <span class=\"cm-operator\">*</span> <span class=\"cm-variable\">theNumber</span>);\n<span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">else</span>\n  <span class=\"cm-variable\">alert</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"Hey. Why didn't you give me a number?\"</span>);</pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_ZmJjq4NvCB\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_ZmJjq4NvCB\" style=\"color: rgb(68, 102, 119);\"></a>If we have more than two paths to choose from, multiple&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">if</code>/<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">else</code>&nbsp;pairs can be “chained” together. Here’s an example:</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_9aykimugCx\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_9aykimugCx\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">num</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">Number</span>(<span class=\"cm-variable\">prompt</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"Pick a number\"</span>, <span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"0\"</span>));\n\n<span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">if</span> (<span class=\"cm-variable\">num</span> <span class=\"cm-operator\">&lt;</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">10</span>)\n  <span class=\"cm-variable\">alert</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"Small\"</span>);\n<span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">else</span> <span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">if</span> (<span class=\"cm-variable\">num</span> <span class=\"cm-operator\">&lt;</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">100</span>)\n  <span class=\"cm-variable\">alert</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"Medium\"</span>);\n<span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">else</span>\n  <span class=\"cm-variable\">alert</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"Large\"</span>);</pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_6w2546HxbK\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_6w2546HxbK\" style=\"color: rgb(68, 102, 119);\"></a>The program will first check whether&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">num</code>&nbsp;is less than 10. If it is, it chooses that branch, shows&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">\"Small\"</code>, and is done. If it isn’t, it takes the&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">else</code>&nbsp;branch, which itself contains a second&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">if</code>. If the second condition (<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">&lt; 100</code>) holds, that means the number is between 10 and 100, and&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">\"Medium\"</code>&nbsp;is shown. If it doesn’t, the second, and last,&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">else</code>&nbsp;branch is chosen.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_JniuPPdJZD\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_JniuPPdJZD\" style=\"color: rgb(68, 102, 119);\"></a>The flow chart for this program looks something like this:</p><div class=\"image\" style=\"max-width: 640px; margin: 0px 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><img src=\"http://eloquentjavascript.net/img/controlflow-nested-if.svg\" alt=\"Nested if control flow\" style=\"max-width: 100%;\"></div><h2 id=\"loops\" style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 23px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_FaGGgUI+MM\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_FaGGgUI+MM\" style=\"color: rgb(68, 102, 119);\"></a>while and do loops</h2><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_FIHE6k56BA\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_FIHE6k56BA\" style=\"color: rgb(68, 102, 119);\"></a>Consider a program that prints all even numbers from 0 to 12. One way to write this is as follows:</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_ciaCwGgFZR\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_ciaCwGgFZR\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">0</span>);\n<span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">2</span>);\n<span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">4</span>);\n<span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">6</span>);\n<span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">8</span>);\n<span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">10</span>);\n<span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">12</span>);</pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_r1EVilCb9Y\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_r1EVilCb9Y\" style=\"color: rgb(68, 102, 119);\"></a>That works, but the idea of writing a program is to make something&nbsp;<em>less</em>&nbsp;work, not more. If we needed all even numbers less than 1,000, the previous would be unworkable. What we need is a way to repeat some code. This form of control flow is called a&nbsp;<em>loop</em>:</p><div class=\"image\" style=\"max-width: 640px; margin: 0px 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><img src=\"http://eloquentjavascript.net/img/controlflow-loop.svg\" alt=\"Loop control flow\" style=\"max-width: 100%;\"></div><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_1PXG58nhBq\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_1PXG58nhBq\" style=\"color: rgb(68, 102, 119);\"></a>Looping control flow allows us to go back to some point in the program where we were before and repeat it with our current program state. If we combine this with a variable that counts, we can do something like this:</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_CahmTYuIgt\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_CahmTYuIgt\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">number</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">0</span>;\n<span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">while</span> (<span class=\"cm-variable\">number</span> <span class=\"cm-operator\">&lt;=</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">12</span>) {\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-variable\">number</span>);\n  <span class=\"cm-variable\">number</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">number</span> <span class=\"cm-operator\">+</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">2</span>;\n}\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// → 0</span>\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// → 2</span>\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">//   … etcetera</span></pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_tCSkGQTO9J\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_tCSkGQTO9J\" style=\"color: rgb(68, 102, 119);\"></a>A statement starting with the keyword&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">while</code>&nbsp;creates a loop. The word&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">while</code>is followed by an expression in parentheses and then a statement, much like&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">if</code>. The loop executes that statement as long as the expression produces a value that is&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">true</code>&nbsp;when converted to Boolean type.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_iwEcAR3f0a\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_iwEcAR3f0a\" style=\"color: rgb(68, 102, 119);\"></a>In this loop, we want to both print the current number and add two to our variable. Whenever we need to execute multiple statements inside a loop, we wrap them in curly braces (<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">{</code>&nbsp;and&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">}</code>). Braces do for statements what parentheses do for expressions: they group them together, making them count as a single statement. A sequence of statements wrapped in braces is called a&nbsp;<em>block</em>.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_UxO2K/wbSG\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_UxO2K/wbSG\" style=\"color: rgb(68, 102, 119);\"></a>Many JavaScript programmers wrap every single loop or&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">if</code>&nbsp;body in braces. They do this both for the sake of consistency and to avoid having to add or remove braces when changing the number of statements in the body later. In this book, I will write most single-statement bodies without braces, since I value brevity. You are free to go with whichever style you prefer.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_5AsEqW7qSx\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_5AsEqW7qSx\" style=\"color: rgb(68, 102, 119);\"></a>The variable&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">number</code>&nbsp;demonstrates the way a variable can track the progress of a program. Every time the loop repeats,&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">number</code>&nbsp;is incremented by&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">2</code>. Then, at the beginning of every repetition, it is compared with the number&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">12</code>&nbsp;to decide whether the program has done all the work it intended to do.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_eimxKSJFYF\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_eimxKSJFYF\" style=\"color: rgb(68, 102, 119);\"></a>As an example that actually does something useful, we can now write a program that calculates and shows the value of 2<sup>10</sup>&nbsp;(2 to the 10th power). We use two variables: one to keep track of our result and one to count how often we have multiplied this result by 2. The loop tests whether the second variable has reached 10 yet and then updates both variables.</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_96YmFTxI9z\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_96YmFTxI9z\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">result</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">1</span>;\n<span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">counter</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">0</span>;\n<span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">while</span> (<span class=\"cm-variable\">counter</span> <span class=\"cm-operator\">&lt;</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">10</span>) {\n  <span class=\"cm-variable\">result</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">result</span> <span class=\"cm-operator\">*</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">2</span>;\n  <span class=\"cm-variable\">counter</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">counter</span> <span class=\"cm-operator\">+</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">1</span>;\n}\n<span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-variable\">result</span>);\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// → 1024</span></pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_MERlXZu4+T\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_MERlXZu4+T\" style=\"color: rgb(68, 102, 119);\"></a>The counter could also start at&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">1</code>&nbsp;and check for&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">&lt;= 10</code>, but, for reasons that will become apparent in&nbsp;<a href=\"http://eloquentjavascript.net/04_data.html#array_indexing\" style=\"color: rgb(68, 102, 119);\">Chapter 4</a>, it is a good idea to get used to counting from 0.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_vrOESKfZl/\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_vrOESKfZl/\" style=\"color: rgb(68, 102, 119);\"></a>The&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">do</code>&nbsp;loop is a control structure similar to the&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">while</code>&nbsp;loop. It differs only on one point: a&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">do</code>&nbsp;loop always executes its body at least once, and it starts testing whether it should stop only after that first execution. To reflect this, the test appears after the body of the loop:</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_WhNPkjCnm1\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_WhNPkjCnm1\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">do</span> {\n  <span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">yourName</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">prompt</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"Who are you?\"</span>);\n} <span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">while</span> (<span class=\"cm-operator\">!</span><span class=\"cm-variable\">yourName</span>);\n<span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-variable\">yourName</span>);</pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_gpU7uCWE2q\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_gpU7uCWE2q\" style=\"color: rgb(68, 102, 119);\"></a>This program will force you to enter a name. It will ask again and again until it gets something that is not an empty string. Applying the&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">!</code>&nbsp;operator will convert a value to Boolean type before negating it, and all strings except&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">\"\"</code>convert to&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">true</code>. This means the loop continues going round until you provide a name that is not the empty string.</p><h2 style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 23px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_3I0M2f1Cmh\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_3I0M2f1Cmh\" style=\"color: rgb(68, 102, 119);\"></a>Indenting Code</h2><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_GLz5olRt8V\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_GLz5olRt8V\" style=\"color: rgb(68, 102, 119);\"></a>You’ve probably noticed the spaces I put in front of some statements. In JavaScript, these are not required—the computer will accept the program just fine without them. In fact, even the line breaks in programs are optional. You could write a program as a single long line if you felt like it. The role of the indentation inside blocks is to make the structure of the code stand out. In complex code, where new blocks are opened inside other blocks, it can become hard to see where one block ends and another begins. With proper indentation, the visual shape of a program corresponds to the shape of the blocks inside it. I like to use two spaces for every open block, but tastes differ—some people use four spaces, and some people use tab characters.</p><h2 style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 23px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_oupMC+5FKN\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_oupMC+5FKN\" style=\"color: rgb(68, 102, 119);\"></a>for loops</h2><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_t55fBgZ9ww\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_t55fBgZ9ww\" style=\"color: rgb(68, 102, 119);\"></a>Many loops follow the pattern seen in the previous&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">while</code>&nbsp;examples. First, a “counter” variable is created to track the progress of the loop. Then comes a<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">while</code>&nbsp;loop, whose test expression usually checks whether the counter has reached some boundary yet. At the end of the loop body, the counter is updated to track progress.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_i8KoivP+MV\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_i8KoivP+MV\" style=\"color: rgb(68, 102, 119);\"></a>Because this pattern is so common, JavaScript and similar languages provide a slightly shorter and more comprehensive form, the&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">for</code>&nbsp;loop.</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_WTA+HgO435\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_WTA+HgO435\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">for</span> (<span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">number</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">0</span>; <span class=\"cm-variable\">number</span> <span class=\"cm-operator\">&lt;=</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">12</span>; <span class=\"cm-variable\">number</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">number</span> <span class=\"cm-operator\">+</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">2</span>)\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-variable\">number</span>);\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// → 0</span>\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// → 2</span>\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">//   … etcetera</span></pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_dGpYwDLcUj\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_dGpYwDLcUj\" style=\"color: rgb(68, 102, 119);\"></a>This program is exactly equivalent to the&nbsp;<a href=\"http://eloquentjavascript.net/02_program_structure.html#loops\" style=\"color: rgb(68, 102, 119);\">earlier</a>&nbsp;even-number-printing example. The only change is that all the statements that are related to the “state” of the loop are now grouped together.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_LW20YJQoF9\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_LW20YJQoF9\" style=\"color: rgb(68, 102, 119);\"></a>The parentheses after a&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">for</code>&nbsp;keyword must contain two semicolons. The part before the first semicolon&nbsp;<em>initializes</em>&nbsp;the loop, usually by defining a variable. The second part is the expression that&nbsp;<em>checks</em>&nbsp;whether the loop must continue. The final part&nbsp;<em>updates</em>&nbsp;the state of the loop after every iteration. In most cases, this is shorter and clearer than a&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">while</code>&nbsp;construct.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_Rst5RlpePZ\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_Rst5RlpePZ\" style=\"color: rgb(68, 102, 119);\"></a>Here is the code that computes 2<sup>10</sup>, using&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">for</code>&nbsp;instead of&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">while</code>:</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_maKXtUWt9e\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_maKXtUWt9e\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">result</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">1</span>;\n<span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">for</span> (<span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">counter</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">0</span>; <span class=\"cm-variable\">counter</span> <span class=\"cm-operator\">&lt;</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">10</span>; <span class=\"cm-variable\">counter</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">counter</span> <span class=\"cm-operator\">+</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">1</span>)\n  <span class=\"cm-variable\">result</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">result</span> <span class=\"cm-operator\">*</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">2</span>;\n<span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-variable\">result</span>);\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// → 1024</span></pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_pNim3UxKW2\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_pNim3UxKW2\" style=\"color: rgb(68, 102, 119);\"></a>Note that even though no block is opened with a&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">{</code>, the statement in the loop is still indented two spaces to make it clear that it “belongs” to the line before it.</p><h2 style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 23px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_WWKAoSPJ47\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_WWKAoSPJ47\" style=\"color: rgb(68, 102, 119);\"></a>Breaking Out of a Loop</h2><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_ct/RAqWly8\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_ct/RAqWly8\" style=\"color: rgb(68, 102, 119);\"></a>Having the loop’s condition produce&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">false</code>&nbsp;is not the only way a loop can finish. There is a special statement called&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">break</code>&nbsp;that has the effect of immediately jumping out of the enclosing loop.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_Vnm45Nv5hS\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_Vnm45Nv5hS\" style=\"color: rgb(68, 102, 119);\"></a>This program illustrates the&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">break</code>&nbsp;statement. It finds the first number that is both greater than or equal to 20 and divisible by 7.</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_66JDbiJOJ5\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_66JDbiJOJ5\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">for</span> (<span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">current</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">20</span>; ; <span class=\"cm-variable\">current</span><span class=\"cm-operator\">++</span>) {\n  <span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">if</span> (<span class=\"cm-variable\">current</span> <span class=\"cm-operator\">%</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">7</span> <span class=\"cm-operator\">==</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">0</span>)\n    <span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">break</span>;\n}\n<span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-variable\">current</span>);\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// → 21</span></pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_6KpM9sBZ2r\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_6KpM9sBZ2r\" style=\"color: rgb(68, 102, 119);\"></a>Using the remainder (<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">%</code>) operator is an easy way to test whether a number is divisible by another number. If it is, the remainder of their division is zero.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_3UnZkFW7lj\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_3UnZkFW7lj\" style=\"color: rgb(68, 102, 119);\"></a>The&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">for</code>&nbsp;construct in the example does not have a part that checks for the end of the loop. This means that the loop will never stop unless the&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">break</code>statement inside is executed.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_2mGltrXORo\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_2mGltrXORo\" style=\"color: rgb(68, 102, 119);\"></a>If you were to leave out that&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">break</code>&nbsp;statement or accidentally write a condition that always produces&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">true</code>, your program would get stuck in an&nbsp;<em>infinite loop</em>. A program stuck in an infinite loop will never finish running, which is usually a bad thing.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_0F9xH2r4jT\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_0F9xH2r4jT\" style=\"color: rgb(68, 102, 119);\"></a>If you create an infinite loop in one of the examples on these pages, you’ll usually be asked whether you want to stop the script after a few seconds. If that fails, you will have to close the tab that you’re working in, or on some browsers close your whole browser, in order to recover.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_f7LsUmJq1I\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_f7LsUmJq1I\" style=\"color: rgb(68, 102, 119);\"></a>The&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">continue</code>&nbsp;keyword is similar to&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">break</code>, in that it influences the progress of a loop. When&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">continue</code>&nbsp;is encountered in a loop body, control jumps out of the body and continues with the loop’s next iteration.</p><h2 style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 23px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_TGUhwjSkqm\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_TGUhwjSkqm\" style=\"color: rgb(68, 102, 119);\"></a>Updating variables succinctly</h2><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_4XaFXVHI9b\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_4XaFXVHI9b\" style=\"color: rgb(68, 102, 119);\"></a>Especially when looping, a program often needs to “update” a variable to hold a value based on that variable’s previous value.</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_2I9qAKEFto\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_2I9qAKEFto\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-variable\">counter</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">counter</span> <span class=\"cm-operator\">+</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">1</span>;</pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_n9PMtWEgzN\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_n9PMtWEgzN\" style=\"color: rgb(68, 102, 119);\"></a>JavaScript provides a shortcut for this:</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_+5YpCv/iKG\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_+5YpCv/iKG\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-variable\">counter</span> <span class=\"cm-operator\">+=</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">1</span>;</pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_3IlWnnMlMo\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_3IlWnnMlMo\" style=\"color: rgb(68, 102, 119);\"></a>Similar shortcuts work for many other operators, such as&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">result *= 2</code>&nbsp;to double&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">result</code>&nbsp;or&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">counter -= 1</code>&nbsp;to count downward.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_+odXBLNKvV\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_+odXBLNKvV\" style=\"color: rgb(68, 102, 119);\"></a>This allows us to shorten our counting example a little more.</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_tBGVwznf7K\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_tBGVwznf7K\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">for</span> (<span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">number</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">0</span>; <span class=\"cm-variable\">number</span> <span class=\"cm-operator\">&lt;=</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">12</span>; <span class=\"cm-variable\">number</span> <span class=\"cm-operator\">+=</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">2</span>)\n  <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-variable\">number</span>);</pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_jpGEbhH1GX\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_jpGEbhH1GX\" style=\"color: rgb(68, 102, 119);\"></a>For&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">counter += 1</code>&nbsp;and&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">counter -= 1</code>, there are even shorter equivalents:&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">counter++</code>&nbsp;and&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">counter--</code>.</p><h2 style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 23px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_jMKsa0SXdL\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_jMKsa0SXdL\" style=\"color: rgb(68, 102, 119);\"></a>Dispatching on a value with switch</h2><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_t3Fw/3tp0F\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_t3Fw/3tp0F\" style=\"color: rgb(68, 102, 119);\"></a>It is common for code to look like this:</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_A9TwfNNqCW\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_A9TwfNNqCW\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">if</span> (<span class=\"cm-variable\">variable</span> <span class=\"cm-operator\">==</span> <span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"value1\"</span>) <span class=\"cm-variable\">action1</span>();\n<span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">else</span> <span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">if</span> (<span class=\"cm-variable\">variable</span> <span class=\"cm-operator\">==</span> <span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"value2\"</span>) <span class=\"cm-variable\">action2</span>();\n<span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">else</span> <span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">if</span> (<span class=\"cm-variable\">variable</span> <span class=\"cm-operator\">==</span> <span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"value3\"</span>) <span class=\"cm-variable\">action3</span>();\n<span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">else</span> <span class=\"cm-variable\">defaultAction</span>();</pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_NAtglzdIez\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_NAtglzdIez\" style=\"color: rgb(68, 102, 119);\"></a>There is a construct called&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">switch</code>&nbsp;that is intended to solve such a “dispatch” in a more direct way. Unfortunately, the syntax JavaScript uses for this (which it inherited from the C/Java line of programming languages) is somewhat awkward—a chain of&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">if</code>&nbsp;statements often looks better. Here is an example:</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_algpo6jq8U\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_algpo6jq8U\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">switch</span> (<span class=\"cm-variable\">prompt</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"What is the weather like?\"</span>)) {\n  <span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">case</span> <span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"rainy\"</span>:\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"Remember to bring an umbrella.\"</span>);\n    <span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">break</span>;\n  <span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">case</span> <span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"sunny\"</span>:\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"Dress lightly.\"</span>);\n  <span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">case</span> <span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"cloudy\"</span>:\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"Go outside.\"</span>);\n    <span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">break</span>;\n  <span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">default</span>:\n    <span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"Unknown weather type!\"</span>);\n    <span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">break</span>;\n}</pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_25X42G30Nq\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_25X42G30Nq\" style=\"color: rgb(68, 102, 119);\"></a>You may put any number of&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">case</code>&nbsp;labels inside the block opened by&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">switch</code>. The program will jump to the label that corresponds to the value that&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">switch</code>was given or to&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">default</code>&nbsp;if no matching value is found. It starts executing statements there, even if they’re under another label, until it reaches a&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">break</code>statement. In some cases, such as the&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">\"sunny\"</code>&nbsp;case in the example, this can be used to share some code between cases (it recommends going outside for both sunny and cloudy weather). But beware: it is easy to forget such a&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">break</code>, which will cause the program to execute code you do not want executed.</p><h2 style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 23px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_t54vuASjLD\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_t54vuASjLD\" style=\"color: rgb(68, 102, 119);\"></a>Capitalization</h2><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_3D9T5AdSU0\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_3D9T5AdSU0\" style=\"color: rgb(68, 102, 119);\"></a>Variable names may not contain spaces, yet it is often helpful to use multiple words to clearly describe what the variable represents. These are pretty much your choices for writing a variable name with several words in it:</p><pre style=\"padding: 5px 0px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\">fuzzylittleturtle\nfuzzy_little_turtle\nFuzzyLittleTurtle\nfuzzyLittleTurtle</pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_iHeX2bOrpK\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_iHeX2bOrpK\" style=\"color: rgb(68, 102, 119);\"></a>The first style can be hard to read. Personally, I like the look of the underscores, though that style is a little painful to type. The standard JavaScript functions, and most JavaScript programmers, follow the bottom style—they capitalize every word except the first. It is not hard to get used to little things like that, and code with mixed naming styles can be jarring to read, so we will just follow this convention.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_zMlRK/pymj\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_zMlRK/pymj\" style=\"color: rgb(68, 102, 119);\"></a>In a few cases, such as the&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">Number</code>&nbsp;function, the first letter of a variable is also capitalized. This was done to mark this function as a constructor. What a constructor is will become clear in&nbsp;<a href=\"http://eloquentjavascript.net/06_object.html#constructors\" style=\"color: rgb(68, 102, 119);\">Chapter 6</a>. For now, the important thing is not to be bothered by this apparent lack of consistency.</p><h2 style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 23px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_/OBuIOX390\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_/OBuIOX390\" style=\"color: rgb(68, 102, 119);\"></a>Comments</h2><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_0/Ms9AYRwI\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_0/Ms9AYRwI\" style=\"color: rgb(68, 102, 119);\"></a>Often, raw code does not convey all the information you want a program to convey to human readers, or it conveys it in such a cryptic way that people might not understand it. At other times, you might just feel poetic or want to include some thoughts as part of your program. This is what&nbsp;<em>comments</em>&nbsp;are for.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_c5N0ebF2ts\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_c5N0ebF2ts\" style=\"color: rgb(68, 102, 119);\"></a>A comment is a piece of text that is part of a program but is completely ignored by the computer. JavaScript has two ways of writing comments. To write a single-line comment, you can use two slash characters (<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">//</code>) and then the comment text after it.</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_0ZikuiZ4zg\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_0ZikuiZ4zg\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">accountBalance</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">calculateBalance</span>(<span class=\"cm-variable\">account</span>);\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// It's a green hollow where a river sings</span>\n<span class=\"cm-variable\">accountBalance</span>.<span class=\"cm-property\">adjust</span>();\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// Madly catching white tatters in the grass.</span>\n<span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">report</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">new</span> <span class=\"cm-variable\">Report</span>();\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// Where the sun on the proud mountain rings:</span>\n<span class=\"cm-variable\">addToReport</span>(<span class=\"cm-variable\">accountBalance</span>, <span class=\"cm-variable\">report</span>);\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// It's a little valley, foaming like light in a glass.</span></pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_UD6DcJKN/S\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_UD6DcJKN/S\" style=\"color: rgb(68, 102, 119);\"></a>A&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">//</code>&nbsp;comment goes only to the end of the line. A section of text between&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">/*</code>and&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">*/</code>&nbsp;will be ignored, regardless of whether it contains line breaks. This is often useful for adding blocks of information about a file or a chunk of program.</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_qmmXe1V0mf\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_qmmXe1V0mf\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">/*</span>\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\"> I first found this number scrawled on the back of one of</span>\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\"> my notebooks a few years ago. Since then, it has often</span>\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\"> dropped by, showing up in phone numbers and the serial</span>\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\"> numbers of products that I've bought. It obviously likes</span>\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\"> me, so I've decided to keep it.</span>\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">*/</span>\n<span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">myNumber</span> <span class=\"cm-operator\">=</span> <span class=\"cm-number\" style=\"color: rgb(0, 68, 34);\">11213</span>;</pre><h2 style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 23px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_ErccPg/l98\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_ErccPg/l98\" style=\"color: rgb(68, 102, 119);\"></a>Summary</h2><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_qenTzu+nvg\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_qenTzu+nvg\" style=\"color: rgb(68, 102, 119);\"></a>You now know that a program is built out of statements, which themselves sometimes contain more statements. Statements tend to contain expressions, which themselves can be built out of smaller expressions.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_KbysBfaBh4\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_KbysBfaBh4\" style=\"color: rgb(68, 102, 119);\"></a>Putting statements after one another gives you a program that is executed from top to bottom. You can introduce disturbances in the flow of control by using conditional (<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">if</code>,&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">else</code>, and&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">switch</code>) and looping (<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">while</code>,&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">do</code>, and&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">for</code>) statements.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_cDVCQB0d+r\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_cDVCQB0d+r\" style=\"color: rgb(68, 102, 119);\"></a>Variables can be used to file pieces of data under a name, and they are useful for tracking state in your program. The environment is the set of variables that are defined. JavaScript systems always put a number of useful standard variables into your environment.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_zgNEy0za9M\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_zgNEy0za9M\" style=\"color: rgb(68, 102, 119);\"></a>Functions are special values that encapsulate a piece of program. You can invoke them by writing&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">functionName(argument1, argument2)</code>. Such a function call is an expression, and may produce a value.</p><h2 style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 23px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_TcUD2vzyMe\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_TcUD2vzyMe\" style=\"color: rgb(68, 102, 119);\"></a>Exercises</h2><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_Uj/Ehlt+c3\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_Uj/Ehlt+c3\" style=\"color: rgb(68, 102, 119);\"></a>If you are unsure how to try your solutions to exercises, refer to the&nbsp;<a href=\"http://eloquentjavascript.net/00_intro.html#intro\" style=\"color: rgb(68, 102, 119);\">introduction</a>.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_VR0+805/R0\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_VR0+805/R0\" style=\"color: rgb(68, 102, 119);\"></a>Each exercise starts with a problem description. Read that and try to solve the exercise. If you run into problems, consider reading the hints after the exercise. Full solutions to the exercises are not included in this book, but you can find them online at&nbsp;<a href=\"http://eloquentjavascript.net/code\" style=\"color: rgb(68, 102, 119);\"><em>eloquentjavascript.net/code</em></a>. If you want to learn something from the exercises, I recommend looking at the solutions only after you’ve solved the exercise, or at least after you’ve attacked it long and hard enough to have a slight headache.</p><h3 style=\"font-family: Cinzel, Georgia, serif; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 20px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_umoXp9u0e7\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_umoXp9u0e7\" style=\"color: rgb(68, 102, 119);\"></a>Looping a triangle</h3><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_pP646YLlGy\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_pP646YLlGy\" style=\"color: rgb(68, 102, 119);\"></a>Write a loop that makes seven calls to&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">console.log</code>&nbsp;to output the following triangle:</p><pre style=\"padding: 5px 0px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\">#\n##\n###\n####\n#####\n######\n#######</pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_hwij+BD/vz\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_hwij+BD/vz\" style=\"color: rgb(68, 102, 119);\"></a>It may be useful to know that you can find the length of a string by writing&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">.length</code>&nbsp;after it.</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_RYNf/jmEP5\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_RYNf/jmEP5\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-keyword\" style=\"color: rgb(85, 0, 102);\">var</span> <span class=\"cm-variable\">abc</span> <span class=\"cm-operator\">=</span> <span class=\"cm-string\" style=\"color: rgb(119, 0, 0);\">\"abc\"</span>;\n<span class=\"cm-variable\">console</span>.<span class=\"cm-property\">log</span>(<span class=\"cm-variable\">abc</span>.<span class=\"cm-property\">length</span>);\n<span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// → 3</span></pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_hzLkQ7lBb5\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_hzLkQ7lBb5\" style=\"color: rgb(68, 102, 119);\"></a>Most exercises contain a piece of code that you can modify to solve the exercise. Remember that you can click code blocks to edit them.</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_CfkOp8tkUe\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_CfkOp8tkUe\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// Your code here.</span></pre><div class=\"solution\" style=\"color: rgb(17, 85, 102); cursor: pointer; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"></div><h3 style=\"font-family: Cinzel, Georgia, serif; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 20px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_rebKE3gdjV\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_rebKE3gdjV\" style=\"color: rgb(68, 102, 119);\"></a>FizzBuzz</h3><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_i0Cvwf75cQ\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_i0Cvwf75cQ\" style=\"color: rgb(68, 102, 119);\"></a>Write a program that uses&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">console.log</code>&nbsp;to print all the numbers from 1 to 100, with two exceptions. For numbers divisible by 3, print&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">\"Fizz\"</code>&nbsp;instead of the number, and for numbers divisible by 5 (and not 3), print&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">\"Buzz\"</code>&nbsp;instead.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_fJ/4Bt0n0A\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_fJ/4Bt0n0A\" style=\"color: rgb(68, 102, 119);\"></a>When you have that working, modify your program to print&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">\"FizzBuzz\"</code>, for numbers that are divisible by both 3 and 5 (and still print&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">\"Fizz\"</code>&nbsp;or&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">\"Buzz\"</code>for numbers divisible by only one of those).</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_ixkJ0lwGKY\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_ixkJ0lwGKY\" style=\"color: rgb(68, 102, 119);\"></a>(This is actually an interview question that has been claimed to weed out a significant percentage of programmer candidates. So if you solved it, you’re now allowed to feel good about yourself.)</p><pre data-language=\"javascript\" class=\"snippet cm-s-default\" style=\"padding: 5px 30px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-right: -30px; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; cursor: pointer; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"><a class=\"c_ident\" id=\"c_CfkOp8tkUe\" href=\"http://eloquentjavascript.net/02_program_structure.html#c_CfkOp8tkUe\" style=\"color: rgb(68, 102, 119);\"></a><span class=\"cm-comment\" style=\"color: rgb(119, 68, 0);\">// Your code here.</span></pre><div class=\"solution\" style=\"color: rgb(17, 85, 102); cursor: pointer; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"></div><h3 style=\"font-family: Cinzel, Georgia, serif; margin: 1rem -30px 1rem 0px; letter-spacing: 2px; font-size: 20px; padding-right: 30px; color: rgb(0, 0, 0);\"><a class=\"h_ident\" id=\"h_5Hz2kiaaXp\" href=\"http://eloquentjavascript.net/02_program_structure.html#h_5Hz2kiaaXp\" style=\"color: rgb(68, 102, 119);\"></a>Chess board</h3><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_uH3DV6RVnV\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_uH3DV6RVnV\" style=\"color: rgb(68, 102, 119);\"></a>Write a program that creates a string that represents an 8×8 grid, using newline characters to separate lines. At each position of the grid there is either a space or a “#” character. The characters should form a chess board.</p><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_9kgrie1A2f\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_9kgrie1A2f\" style=\"color: rgb(68, 102, 119);\"></a>Passing this string to&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">console.log</code>&nbsp;should show something like this:</p><pre style=\"padding: 5px 0px 5px 15px; line-height: 1.35; margin-top: 1rem; margin-bottom: 1rem; max-width: 100%; font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"> # # # #\n# # # #\n # # # #\n# # # #\n # # # #\n# # # #\n # # # #\n# # # #</pre><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_8n1E0bRGiW\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_8n1E0bRGiW\" style=\"color: rgb(68, 102, 119);\"></a>When you have a program that generates this pattern, define a variable&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">size = 8</code>&nbsp;and change the program so that it works for any&nbsp;<code style=\"font-size: 18px; font-family: &quot;PT Mono&quot;, monospace; padding: 0px 2px;\">size</code>, outputting a grid of the given width and height.</p>",
  "company_id": 1001,
  "description":
    "<h1 style=\"font-family: Cinzel, Georgia, serif; font-weight: 700; margin-top: 1rem; margin-bottom: 1rem; letter-spacing: 2px; font-size: 26px; color: rgb(0, 0, 0);\">Program Structure</h1><blockquote style=\"margin-bottom: 0px; margin-left: 3em; padding: 0px; position: relative; font-size: 17px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif;\"><p style=\"margin-right: -30px; padding-right: 30px; color: rgb(51, 51, 51);\"><a class=\"p_ident\" id=\"p_J/zCYrllfQ\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_J/zCYrllfQ\" style=\"color: rgb(68, 102, 119);\"></a>And my heart glows bright red under my filmy, translucent skin and they have to administer 10cc of JavaScript to get me to come back. (I respond well to toxins in the blood.) Man, that stuff will kick the peaches right out your gills!</p><footer style=\"position: relative; margin-left: 1em; margin-top: -0.5em;\">_why,&nbsp;<cite>Why's (Poignant) Guide to Ruby</cite></footer></blockquote><p style=\"margin-right: -30px; padding-right: 30px; font-family: Georgia, &quot;Nimbus Roman No9 L&quot;, &quot;Century Schoolbook L&quot;, serif; font-size: 20px;\"><a class=\"p_ident\" id=\"p_x4mfX9d1CF\" href=\"http://eloquentjavascript.net/02_program_structure.html#p_x4mfX9d1CF\" style=\"color: rgb(68, 102, 119);\"></a>In this chapter, we will start to do things that can actually be called&nbsp;<em>programming</em>. We will expand our command of the JavaScript language beyond the nouns and sentence fragments we’ve seen so far, to the point where we can express some meaningful prose.</p>",
  "end_date": false,
  "inviteOnly": false,
  "misc_urls": [],
  "name": "Eloquent JavaScript",
  "profile_uid": "e7cc804d-8ab1-431e-96a6-232d477fb7e0",
  "questions": {
    "quiz": false
  },
  "sortDate": 1509103024807,
  "updates": [
    {
      "date": 1509103024807,
      "profile_uid": "e7cc804d-8ab1-431e-96a6-232d477fb7e0"
    },
    {
      "date": 1509104280540,
      "profile_uid": "e7cc804d-8ab1-431e-96a6-232d477fb7e0"
    },
    {
      "date": 1509104356866,
      "profile_uid": "e7cc804d-8ab1-431e-96a6-232d477fb7e0"
    },
    {
      "date": 1509104369860,
      "profile_uid": "e7cc804d-8ab1-431e-96a6-232d477fb7e0"
    },
    {
      "date": 1509114773826,
      "profile_uid": "e7cc804d-8ab1-431e-96a6-232d477fb7e0"
    },
    {
      "date": 1509114909399,
      "profile_uid": "e7cc804d-8ab1-431e-96a6-232d477fb7e0"
    },
    {
      "date": 1509116065160,
      "profile_uid": "e7cc804d-8ab1-431e-96a6-232d477fb7e0"
    },
    {
      "date": 1509116165865,
      "profile_uid": "e7cc804d-8ab1-431e-96a6-232d477fb7e0"
    },
    {
      "date": 1509391149159,
      "profile_uid": "e7cc804d-8ab1-431e-96a6-232d477fb7e0"
    },
    {
      "date": 1511829579771,
      "profile_uid": "e7cc804d-8ab1-431e-96a6-232d477fb7e0"
    }
  ]
}
